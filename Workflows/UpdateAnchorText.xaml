<Activity mc:Ignorable="sap sap2010" x:Class="Process" this:Process.in_strGoogleCredential="D:\1.Project\Uipath\GoogleCredential\credentials.json" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:uga="clr-namespace:UiPath.GSuite.Activities;assembly=UiPath.GSuite.Activities" xmlns:ugade="clr-namespace:UiPath.GSuite.Activities.Drive.Enums;assembly=UiPath.GSuite.Activities" xmlns:ugam="clr-namespace:UiPath.GSuite.Activities.Models;assembly=UiPath.GSuite.Activities" xmlns:ugdm="clr-namespace:UiPath.GSuite.Drive.Models;assembly=UiPath.GSuite" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:usau="clr-namespace:UiPath.Shared.Activities.Utils;assembly=UiPath.GSuite.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_strGoogleCredential" Type="InArgument(x:String)" />
    <x:Property Name="in_strInputKey" Type="InArgument(x:String)" />
    <x:Property Name="io_dt_Generated" Type="InOutArgument(sd:DataTable)" />
    <x:Property Name="in_gdriveFolder" Type="InArgument(ugdm:GDriveRemoteItem)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>Process_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.GSuite.Activities.Sheets.Filters</x:String>
      <x:String>UiPath.GSuite.Activities.Filters</x:String>
      <x:String>UiPath.GSuite.Sheets.Enums</x:String>
      <x:String>UiPath.GSuite.Activities.Models</x:String>
      <x:String>UiPath.GSuite.Drive.Models</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.GSuite.Activities.Utilities</x:String>
      <x:String>UiPath.Productivity.Activities.Diagnostics</x:String>
      <x:String>UiPath.GSuite.Activities.Sheets.Triggers</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>UiPath.GSuite.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.GSuite.Activities.Sheets.Enums</x:String>
      <x:String>UiPath.GSuite.Sheets.Models</x:String>
      <x:String>UiPath.GSuite.Activities.Drive.Enums</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Numerics</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>UiPath.GSuite</x:String>
      <x:String>UiPath.GSuite.Activities.Drive.Filters</x:String>
      <x:String>UiPath.GSuite.Drive.Enums</x:String>
      <x:String>UiPath.Productivity.Activities.Persistence</x:String>
      <x:String>UiPath.Sdk.Activities</x:String>
      <x:String>UiPath.Sdk.Activities.DependencyInjection.Contracts</x:String>
      <x:String>UiPath.Sdk.Activities.DependencyInjection</x:String>
      <x:String>UiPath.GSuite.Activities.Drive.Triggers</x:String>
      <x:String>UiPath.GSuite.Activities.Drive</x:String>
      <x:String>UiPath.GSuite.Activities.Docs.Enums</x:String>
      <x:String>Google.Apis.Auth.OAuth2</x:String>
      <x:String>Google.Apis.Services</x:String>
      <x:String>Google.Apis.Docs.v1</x:String>
      <x:String>Google.Apis.Docs.v1.Data</x:String>
      <x:String>System.Threading</x:String>
      <x:String>System.Threading.Tasks</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.GSuite.Activities</AssemblyReference>
      <AssemblyReference>UiPath.GSuite</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Word.Activities</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>Studio.Generated.TypedDataTable1</AssemblyReference>
      <AssemblyReference>Studio.Generated.TypedDataTable1</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Word.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>Studio.Generated.TypedDataTable2</AssemblyReference>
      <AssemblyReference>Studio.Generated.TypedDataTable3</AssemblyReference>
      <AssemblyReference>Studio.Generated.TypedDataTable2</AssemblyReference>
      <AssemblyReference>Studio.Generated.TypedDataTable2</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>Studio.Generated.TypedDataTable4</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>Google.Apis.Auth</AssemblyReference>
      <AssemblyReference>Google.Apis</AssemblyReference>
      <AssemblyReference>Google.Apis.Docs.v1</AssemblyReference>
      <AssemblyReference>System.Threading.AccessControl</AssemblyReference>
      <AssemblyReference>System.Threading</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Core</AssemblyReference>
      <AssemblyReference>UiPath.Vision.Core</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Threading.Tasks.Parallel</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>Microsoft.Extensions.DependencyModel</AssemblyReference>
      <AssemblyReference>RPA_AutoUpdateAnchor.Core</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Main" sap:VirtualizedContainerService.HintSize="1934,3107" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ParallelForEach x:TypeArguments="sd:DataRow" DisplayName="Parallel For Each currentDataTable" sap:VirtualizedContainerService.HintSize="1934,3084" sap2010:WorkflowViewState.IdRef="ParallelForEach`1_5" Values="[io_dt_Generated.AsEnumerable]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ActivityAction x:TypeArguments="sd:DataRow">
        <ActivityAction.Argument>
          <DelegateInArgument x:TypeArguments="sd:DataRow" Name="row" />
        </ActivityAction.Argument>
        <TryCatch DisplayName="Try Catch Get Content" sap:VirtualizedContainerService.HintSize="1884,2911" sap2010:WorkflowViewState.IdRef="TryCatch_7">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <TryCatch.Try>
            <Sequence DisplayName="Try" sap:VirtualizedContainerService.HintSize="1882,2342" sap2010:WorkflowViewState.IdRef="Sequence_55">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[Not String.IsNullOrEmpty(row(3).ToString) AndAlso ( String.IsNullOrEmpty(row(11).ToString) OrElse  row(11).ToString.Trim.ToLower.Contains(&quot;thất bại&quot;) )]" DisplayName="If Check Condition" sap:VirtualizedContainerService.HintSize="1848,2282" sap2010:WorkflowViewState.IdRef="If_5">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="1846,2064" sap2010:WorkflowViewState.IdRef="Sequence_56">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:String" Name="strImageUrl" />
                      <Variable x:TypeArguments="x:String" Name="strFileId" />
                      <Variable x:TypeArguments="x:String" Name="strDocumentUrl" />
                      <Variable x:TypeArguments="x:String" Name="strUpdateResult" />
                      <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" Name="dictAnchorLinks" />
                    </Sequence.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="1812,241" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
                      <ui:MultipleAssign.AssignOperations>
                        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[strDocumentUrl]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">[row(3).ToString.Trim]</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[strImageUrl]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">
                                <Literal x:TypeArguments="x:String" Value="" />
                              </InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[strFileId]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">[Regex.Match(strDocumentUrl, "document\/d\/([^\/]+)").Groups(1).Value]</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">[dictAnchorLinks]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">[New Dictionary(of String,String)]</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                        </scg:List>
                      </ui:MultipleAssign.AssignOperations>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:MultipleAssign>
                    <Parallel DisplayName="parallel_ass_inputs" sap:VirtualizedContainerService.HintSize="1812,598" sap2010:WorkflowViewState.IdRef="Parallel_1">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <TryCatch DisplayName="tc_copy_file_to_backup" sap:VirtualizedContainerService.HintSize="458,519" sap2010:WorkflowViewState.IdRef="TryCatch_9">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <TryCatch.Try>
                          <uga:CopyFileConnections BrowserFileId="{x:Null}" ConnectionAccountName="{x:Null}" ContinueOnError="{x:Null}" File="{x:Null}" FileFriendlyName="{x:Null}" Folder="{x:Null}" FolderIdBackup="{x:Reference __ReferenceID0}" NewFileName="{x:Null}" Result="{x:Null}" AuthScopesInvalid="False" BrowserFolderId="root" ConflictResolution="AddSeparate" ConnectionId="9ec480b7-fae9-4cdd-92ec-3d02a4f03c90" DisplayName="Copy File To Backup" FileInputMode="UrlOrId" FolderFriendlyName="My Drive" FolderInputMode="UrlOrId" sap:VirtualizedContainerService.HintSize="416,305" sap2010:WorkflowViewState.IdRef="CopyFileConnections_1" ManualFileId="[strDocumentUrl]" ManualFolderId="[in_gdriveFolder.Url]" UseConnectionService="True">
                            <uga:CopyFileConnections.Destination>
                              <ugam:DriveItemArgument ConnectionDescriptor="{x:Null}" ConnectionKey="{x:Null}" Existing="{x:Null}" FullPath="{x:Null}" ParentId="{x:Null}" ParentIdFriendlyName="{x:Null}" RelativePath="{x:Null}" BrowserId="root" FriendlyName="My Drive" FullPathHint="My Drive" IdOrUrl="[in_gdriveFolder.Url]" InputMode="UrlOrId">
                                <ugam:DriveItemArgument.Backup>
                                  <usau:BackupSlot x:TypeArguments="ugade:EDriveItemMode" x:Name="__ReferenceID0" StoredValue="UrlOrId">
                                    <usau:BackupSlot.BackupValues>
                                      <scg:List x:TypeArguments="x:Object" x:Key="Browse" Capacity="2">
                                        <InArgument x:TypeArguments="x:String">root</InArgument>
                                        <InArgument x:TypeArguments="x:String">My Drive</InArgument>
                                      </scg:List>
                                    </usau:BackupSlot.BackupValues>
                                  </usau:BackupSlot>
                                </ugam:DriveItemArgument.Backup>
                                <ugam:DriveItemArgument.ParentIdFullPathHint>
                                  <InArgument x:TypeArguments="x:String">
                                    <Literal x:TypeArguments="x:String" Value="" />
                                  </InArgument>
                                </ugam:DriveItemArgument.ParentIdFullPathHint>
                              </ugam:DriveItemArgument>
                            </uga:CopyFileConnections.Destination>
                            <uga:CopyFileConnections.FileIdBackup>
                              <usau:BackupSlot x:TypeArguments="ugade:EDriveItemMode" x:Name="__ReferenceID1" StoredValue="UrlOrId">
                                <usau:BackupSlot.BackupValues>
                                  <scg:List x:TypeArguments="x:Object" x:Key="Browse" Capacity="2">
                                    <x:Null />
                                    <x:Null />
                                  </scg:List>
                                </usau:BackupSlot.BackupValues>
                              </usau:BackupSlot>
                            </uga:CopyFileConnections.FileIdBackup>
                            <uga:CopyFileConnections.Item>
                              <ugam:DriveItemArgument Backup="{x:Reference __ReferenceID1}" BrowserId="{x:Null}" ConnectionDescriptor="{x:Null}" ConnectionKey="{x:Null}" Existing="{x:Null}" FriendlyName="{x:Null}" FullPath="{x:Null}" ParentId="{x:Null}" ParentIdFriendlyName="{x:Null}" RelativePath="{x:Null}" IdOrUrl="[strDocumentUrl]" InputMode="UrlOrId">
                                <ugam:DriveItemArgument.FullPathHint>
                                  <InArgument x:TypeArguments="x:String">
                                    <Literal x:TypeArguments="x:String" Value="" />
                                  </InArgument>
                                </ugam:DriveItemArgument.FullPathHint>
                                <ugam:DriveItemArgument.ParentIdFullPathHint>
                                  <InArgument x:TypeArguments="x:String">
                                    <Literal x:TypeArguments="x:String" Value="" />
                                  </InArgument>
                                </ugam:DriveItemArgument.ParentIdFullPathHint>
                              </ugam:DriveItemArgument>
                            </uga:CopyFileConnections.Item>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </uga:CopyFileConnections>
                        </TryCatch.Try>
                        <TryCatch.Catches>
                          <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_8">
                            <ActivityAction x:TypeArguments="s:Exception">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                              </ActivityAction.Argument>
                              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="416,25" sap2010:WorkflowViewState.IdRef="Sequence_60">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </Sequence>
                            </ActivityAction>
                          </Catch>
                        </TryCatch.Catches>
                        <TryCatch.Finally>
                          <Sequence DisplayName="Finally" sap:VirtualizedContainerService.HintSize="416,25" sap2010:WorkflowViewState.IdRef="Sequence_61">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </Sequence>
                        </TryCatch.Finally>
                      </TryCatch>
                      <If Condition="[Not String.IsNullOrEmpty(row(5).ToString)]" DisplayName="If Link Anchor 5" sap:VirtualizedContainerService.HintSize="510,519" sap2010:WorkflowViewState.IdRef="If_7">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="468,165" sap2010:WorkflowViewState.IdRef="Sequence_70">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign DisplayName="Assign 4 -5" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_25">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[dictAnchorLinks(row(4).ToString.Trim)]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[row(5).ToString.Trim]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="468,89" sap2010:WorkflowViewState.IdRef="Sequence_71">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </Sequence>
                        </If.Else>
                      </If>
                      <If Condition="[Not String.IsNullOrEmpty(row(7).ToString)]" DisplayName="If Link Anchor 7" sap:VirtualizedContainerService.HintSize="240,519" sap2010:WorkflowViewState.IdRef="If_8">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="468,166" sap2010:WorkflowViewState.IdRef="Sequence_72">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign DisplayName="Assign 6 -7" sap:VirtualizedContainerService.HintSize="434,106" sap2010:WorkflowViewState.IdRef="Assign_27">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[dictAnchorLinks(row(6).ToString.Trim)]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[row(7).ToString.Trim]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="468,90" sap2010:WorkflowViewState.IdRef="Sequence_73">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </Sequence>
                        </If.Else>
                      </If>
                      <If Condition="[Not String.IsNullOrEmpty(row(9).ToString)]" DisplayName="If Link Anchor 9" sap:VirtualizedContainerService.HintSize="510,519" sap2010:WorkflowViewState.IdRef="If_6">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="468,165" sap2010:WorkflowViewState.IdRef="Sequence_68">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign DisplayName="Assign 8-9" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_28">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[dictAnchorLinks(row(8).ToString.Trim)]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[row(9).ToString.Trim]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="468,89" sap2010:WorkflowViewState.IdRef="Sequence_69">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </Sequence>
                        </If.Else>
                      </If>
                    </Parallel>
                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="1812,173" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Info" Message="[&quot;Cập nhật anchor text file với URL : &quot; + strDocumentUrl+vbNewLine+&#xD;&#xA;&quot;Danh sách anchor text : &quot;+dictAnchorLinks.Count.ToString+vbNewLine+&#xD;&#xA;&quot;FileID : &quot;+strFileId]">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:LogMessage>
                    <If Condition="[Not String.IsNullOrEmpty(row(10).ToString)]" DisplayName="If Link Image" sap:VirtualizedContainerService.HintSize="1812,57" sap2010:WorkflowViewState.IdRef="If_9">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Then>
                        <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="468,338" sap2010:WorkflowViewState.IdRef="Sequence_96">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Assign DisplayName="Assign strImageUrl" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_39">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">[strImageUrl]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">[row(10).ToString.Trim]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,164" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Info" Message="[&quot;Url image : &quot;+strImageUrl]" />
                        </Sequence>
                      </If.Then>
                      <If.Else>
                        <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="468,89" sap2010:WorkflowViewState.IdRef="Sequence_97">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </Sequence>
                      </If.Else>
                    </If>
                    <Flowchart DisplayName="fc_insert_anchors" sap:VirtualizedContainerService.HintSize="1812,657" sap2010:WorkflowViewState.IdRef="Flowchart_1">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          <av:Point x:Key="ShapeLocation">275,35</av:Point>
                          <av:Size x:Key="ShapeSize">50,50</av:Size>
                          <av:PointCollection x:Key="ConnectorLocation">300,85 300,140</av:PointCollection>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Flowchart.StartNode>
                        <x:Reference>__ReferenceID10</x:Reference>
                      </Flowchart.StartNode>
                      <FlowDecision x:Name="__ReferenceID10" Condition="[dictAnchorLinks.Count &gt; 2 AndAlso String.IsNullOrEmpty(strImageUrl) = False]" DisplayName="FullLink?" sap:VirtualizedContainerService.HintSize="60,60" sap2010:WorkflowViewState.IdRef="FlowDecision_1">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <av:Point x:Key="ShapeLocation">270,140</av:Point>
                            <av:Size x:Key="ShapeSize">60,60</av:Size>
                            <av:PointCollection x:Key="TrueConnector">270,170 175,170</av:PointCollection>
                            <av:PointCollection x:Key="FalseConnector">330,170 380,170 380,250</av:PointCollection>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <FlowDecision.True>
                          <FlowStep x:Name="__ReferenceID3" sap2010:WorkflowViewState.IdRef="FlowStep_1">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <av:Point x:Key="ShapeLocation">65,135</av:Point>
                                <av:Size x:Key="ShapeSize">110,70</av:Size>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Sequence DisplayName="FullLink" sap:VirtualizedContainerService.HintSize="110,70" sap2010:WorkflowViewState.IdRef="Sequence_85">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,57" sap2010:WorkflowViewState.IdRef="CommentOut_8">
                                <ui:CommentOut.Body>
                                  <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,248" sap2010:WorkflowViewState.IdRef="Sequence_91">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:InvokeCode ContinueOnError="{x:Null}" Code="try&#xA;{&#xA;    // Xác thực và khởi tạo dịch vụ Google Docs&#xA;    var credential = GoogleCredential.FromFile(credentialsPath)&#xA;        .CreateScoped(new[] { DocsService.Scope.Documents });&#xA;&#xA;    var docsService = new DocsService(new BaseClientService.Initializer&#xA;    {&#xA;        HttpClientInitializer = credential,&#xA;        ApplicationName = &quot;Google Docs Link Inserter&quot;&#xA;    });&#xA;&#xA;    // Lấy nội dung tài liệu Google Docs&#xA;    var doc = docsService.Documents.Get(fileId).Execute();&#xA;&#xA;    List&lt;Request&gt; requests = new List&lt;Request&gt;(); // Danh sách các yêu cầu cập nhật tài liệu&#xA;    HashSet&lt;string&gt; insertedAnchors = new HashSet&lt;string&gt;(); // Danh sách các anchor đã được chèn&#xA;    Dictionary&lt;string, string&gt; remainingLinks = new Dictionary&lt;string, string&gt;(anchorLinks); // Danh sách anchor chưa chèn&#xA;    string lastAnchorKey = remainingLinks.Keys.LastOrDefault(); // Lấy key của anchor cuối cùng&#xA;    int totalOffset = 0; // Dùng để bù trừ vị trí do chèn/xóa văn bản&#xA;    int paragraphIndex = 0; // Đếm số thứ tự đoạn văn&#xA;    bool skipEvenCheck = false; // Biến để bỏ qua kiểm tra đoạn chẵn/lẻ&#xA;    int paragraph5StartIndex = -1; // Vị trí bắt đầu của đoạn văn thứ 5&#xA;&#xA;    foreach (var element in doc.Body.Content)&#xA;    {&#xA;        if (element.Paragraph != null)&#xA;        {&#xA;            // Bỏ qua các tiêu đề (Heading 1 -&gt; Heading 4)&#xA;            var style = element.Paragraph.ParagraphStyle;&#xA;            if (style != null &amp;&amp; (style.NamedStyleType == &quot;HEADING_1&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_2&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_3&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_4&quot;))&#xA;                continue;&#xA;&#xA;            paragraphIndex++; // Tăng số thứ tự đoạn văn&#xA;&#xA;            if (paragraphIndex == 5)&#xA;            {&#xA;                // Lưu vị trí bắt đầu của đoạn văn thứ 5 để chèn hình ảnh sau này&#xA;                paragraph5StartIndex = element.StartIndex ?? -1;&#xA;            }&#xA;&#xA;            // Bỏ qua các đoạn chẵn (trừ khi có yêu cầu bỏ qua kiểm tra này)&#xA;            if (!skipEvenCheck &amp;&amp; paragraphIndex % 2 == 0)&#xA;                continue;&#xA;&#xA;            skipEvenCheck = false; // Reset biến này mỗi khi kiểm tra đoạn mới&#xA;&#xA;            bool foundInThisParagraph = false; // Kiểm tra xem đoạn này có chứa `inputKey` không&#xA;            string text = &quot;&quot;; // Nội dung đoạn văn&#xA;            int startIndex = -1, endIndex = -1; // Vị trí bắt đầu và kết thúc của đoạn văn&#xA;&#xA;            // Lấy nội dung văn bản của đoạn văn&#xA;            foreach (var textElement in element.Paragraph.Elements)&#xA;            {&#xA;                if (textElement.TextRun != null)&#xA;                {&#xA;                    text += textElement.TextRun.Content;&#xA;                    if (startIndex == -1)&#xA;                        startIndex = (textElement.StartIndex ?? 0) + totalOffset;&#xA;                    endIndex = (textElement.StartIndex ?? 0) + textElement.TextRun.Content.Length + totalOffset;&#xA;                }&#xA;            }&#xA;&#xA;            // Nếu đoạn văn không chứa `inputKey`, bỏ qua và tiếp tục kiểm tra đoạn kế tiếp&#xA;            if (!text.ToLower().Contains(inputKey.ToLower()))&#xA;            {&#xA;                skipEvenCheck = true;&#xA;                continue;&#xA;            }&#xA;&#xA;            // Chèn các anchor vào đoạn văn nếu phù hợp&#xA;            foreach (var anchor in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;            {&#xA;                if (anchor.Key != lastAnchorKey &amp;&amp; !insertedAnchors.Contains(anchor.Key) &amp;&amp; text.ToLower().Contains(inputKey.ToLower()))&#xA;                {&#xA;                    int matchIndex = text.ToLower().IndexOf(inputKey.ToLower());&#xA;                    if (matchIndex != -1)&#xA;                    {&#xA;                        int insertIndex = startIndex + matchIndex;&#xA;&#xA;                        // Xóa `inputKey`&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            DeleteContentRange = new DeleteContentRangeRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + inputKey.Length&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        // Chèn anchor text mới&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            InsertText = new InsertTextRequest&#xA;                            {&#xA;                                Text = anchor.Key,&#xA;                                Location = new Google.Apis.Docs.v1.Data.Location&#xA;                                {&#xA;                                    Index = insertIndex&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        // Gán link cho anchor text&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            UpdateTextStyle = new UpdateTextStyleRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + anchor.Key.Length&#xA;                                },&#xA;                                TextStyle = new TextStyle&#xA;                                {&#xA;                                    Link = new Link { Url = anchor.Value }&#xA;                                },&#xA;                                Fields = &quot;link&quot;&#xA;                            }&#xA;                        });&#xA;&#xA;                        insertedAnchors.Add(anchor.Key);&#xA;                        remainingLinks.Remove(anchor.Key);&#xA;                        foundInThisParagraph = true;&#xA;                        totalOffset += anchor.Key.Length - inputKey.Length;&#xA;                        break;&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            // Chèn anchor cuối cùng nếu chưa được chèn&#xA;&#x9;&#x9;&#x9;if (!foundInThisParagraph &amp;&amp; remainingLinks.Count &gt; 0 &amp;&amp; (lastAnchorKey == remainingLinks.Keys.First() || paragraphIndex == doc.Body.Content.Count))&#xA;            {&#xA;                foreach (var missing in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;                {&#xA;                    int xemThemLength = &quot;Xem thêm: &quot;.Length;&#xA;                    int anchorLength = missing.Key.Length + 1;&#xA;&#xA;                    // Chèn &quot;Xem thêm: &quot; vào cuối đoạn văn&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        InsertText = new InsertTextRequest&#xA;                        {&#xA;                            Text = &quot;Xem thêm: &quot;,&#xA;                            Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex }&#xA;                        }&#xA;                    });&#xA;&#xA;                    // Định dạng văn bản về NORMAL_TEXT để tránh mất định dạng&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateParagraphStyle = new UpdateParagraphStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex,&#xA;                                EndIndex = endIndex + xemThemLength + missing.Key.Length + 1&#xA;                            },&#xA;                            ParagraphStyle = new ParagraphStyle&#xA;                            {&#xA;                                NamedStyleType = &quot;NORMAL_TEXT&quot;&#xA;                            },&#xA;                            Fields = &quot;namedStyleType&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    // Bôi đậm chữ &quot;Xem thêm&quot;&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateTextStyle = new UpdateTextStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex,&#xA;                                EndIndex = endIndex + 9&#xA;                            },&#xA;                            TextStyle = new TextStyle&#xA;                            {&#xA;                                Bold = true&#xA;                            },&#xA;                            Fields = &quot;bold&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    // Chèn anchor cuối cùng kèm xuống dòng&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        InsertText = new InsertTextRequest&#xA;                        {&#xA;                            Text = missing.Key + &quot;\n&quot;,&#xA;                            Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex + xemThemLength }&#xA;                        }&#xA;                    });&#xA;&#xA;                    // Gán link cho anchor cuối cùng&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateTextStyle = new UpdateTextStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex + xemThemLength,&#xA;                                EndIndex = endIndex + xemThemLength + missing.Key.Length&#xA;                            },&#xA;                            TextStyle = new TextStyle&#xA;                            {&#xA;                                Link = new Link { Url = missing.Value }&#xA;                            },&#xA;                            Fields = &quot;link&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    insertedAnchors.Add(missing.Key);&#xA;                    remainingLinks.Remove(missing.Key);&#xA;                    totalOffset += xemThemLength + anchorLength;&#xA;                }&#xA;            }&#xA;            &#xA;&#x9;&#x9;&#x9;//Break&#xA;            if (remainingLinks.Count == 0)&#xA;                break;&#xA;        }&#xA;    }&#xA;&#xA;    // **Chèn hình ảnh sau khi hoàn tất chèn anchor text**&#xA;    if (!string.IsNullOrEmpty(imageUrl) &amp;&amp; paragraph5StartIndex != -1)&#xA;    {&#xA;        requests.Add(new Request&#xA;        {&#xA;            InsertInlineImage = new InsertInlineImageRequest&#xA;            {&#xA;                Location = new Google.Apis.Docs.v1.Data.Location&#xA;                {&#xA;                    Index = paragraph5StartIndex&#xA;                },&#xA;                Uri = imageUrl,&#xA;                ObjectSize = new Google.Apis.Docs.v1.Data.Size&#xA;                {&#xA;                    Width = new Dimension { Magnitude = 480, Unit = &quot;PT&quot; },&#xA;                    Height = new Dimension { Magnitude = 320, Unit = &quot;PT&quot; }&#xA;                }&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;    // Thực thi các yêu cầu cập nhật tài liệu&#xA;    if (requests.Count &gt; 0)&#xA;    {&#xA;        var batchUpdateRequest = new BatchUpdateDocumentRequest { Requests = requests };&#xA;        docsService.Documents.BatchUpdate(batchUpdateRequest, fileId).Execute();&#xA;        updateResult = &quot;Thành công&quot;;&#xA;    }&#xA;    else&#xA;    {&#xA;        updateResult = &quot;Thất bại do không có request nào cập nhật&quot;;&#xA;    }&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    updateResult = &quot;Thất bại: &quot; + ex.Message;&#xA;}&#xA;" DisplayName="Invoke Code UpdateFullLink" sap:VirtualizedContainerService.HintSize="416,188" sap2010:WorkflowViewState.IdRef="InvokeCode_29" Language="CSharp">
                                      <ui:InvokeCode.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="fileId">[strFileId]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="credentialsPath">[in_strGoogleCredential]</InArgument>
                                        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="anchorLinks">[dictAnchorLinks]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="inputKey">[in_strInputKey]</InArgument>
                                        <OutArgument x:TypeArguments="x:String" x:Key="updateResult">[strUpdateResult]</OutArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="imageUrl">[strImageUrl]</InArgument>
                                      </ui:InvokeCode.Arguments>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:InvokeCode>
                                  </Sequence>
                                </ui:CommentOut.Body>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:CommentOut>
                              <Assign DisplayName="Assign full link" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_33">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[strUpdateResult]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[RPA_AutoUpdateAnchor.InsertAnchor.InsertAnchorsAndOptionalImage(in_strInputKey,in_strGoogleCredential,strFileId,dictAnchorLinks,true,true,strImageUrl)]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </FlowStep>
                        </FlowDecision.True>
                        <FlowDecision.False>
                          <FlowDecision x:Name="__ReferenceID4" Condition="[dictAnchorLinks.Count =1 AndAlso String.IsNullOrEmpty(row(5).ToString) AndAlso String.IsNullOrEmpty(row(7).ToString)]" DisplayName="AnchorLinks=1?" sap:VirtualizedContainerService.HintSize="60,60" sap2010:WorkflowViewState.IdRef="FlowDecision_2">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <av:Point x:Key="ShapeLocation">350,250</av:Point>
                                <av:Size x:Key="ShapeSize">60,60</av:Size>
                                <av:PointCollection x:Key="TrueConnector">350,280 235,280</av:PointCollection>
                                <av:PointCollection x:Key="FalseConnector">410,280 490,280 490,340</av:PointCollection>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <FlowDecision.True>
                              <FlowStep x:Name="__ReferenceID5" sap2010:WorkflowViewState.IdRef="FlowStep_2">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <av:Point x:Key="ShapeLocation">125,245</av:Point>
                                    <av:Size x:Key="ShapeSize">110,70</av:Size>
                                    <av:PointCollection x:Key="ConnectorLocation">180,315 180,500 310,500 310,530</av:PointCollection>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <Sequence DisplayName="Have 1 AnchorLinks" sap:VirtualizedContainerService.HintSize="110,70" sap2010:WorkflowViewState.IdRef="Sequence_86">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,57" sap2010:WorkflowViewState.IdRef="CommentOut_9">
                                    <ui:CommentOut.Body>
                                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,248" sap2010:WorkflowViewState.IdRef="Sequence_92">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:InvokeCode ContinueOnError="{x:Null}" Code="try&#xA;{&#xA;    // Xác thực và khởi tạo dịch vụ Google Docs&#xA;    var credential = GoogleCredential.FromFile(credentialsPath)&#xA;        .CreateScoped(new[] { DocsService.Scope.Documents });&#xA;&#xA;    var docsService = new DocsService(new BaseClientService.Initializer&#xA;    {&#xA;        HttpClientInitializer = credential,&#xA;        ApplicationName = &quot;Google Docs Link Inserter&quot;&#xA;    });&#xA;&#xA;    // Lấy nội dung tài liệu Google Docs&#xA;    var doc = docsService.Documents.Get(fileId).Execute();&#xA;&#xA;    List&lt;Request&gt; requests = new List&lt;Request&gt;(); // Danh sách các yêu cầu cập nhật tài liệu&#xA;    HashSet&lt;string&gt; insertedAnchors = new HashSet&lt;string&gt;(); // Danh sách các anchor đã được chèn&#xA;    Dictionary&lt;string, string&gt; remainingLinks = new Dictionary&lt;string, string&gt;(anchorLinks); // Danh sách anchor chưa chèn&#xA;    int totalOffset = 0; // Dùng để bù trừ vị trí do chèn/xóa văn bản&#xA;    int paragraphIndex = 0; // Đếm số thứ tự đoạn văn&#xA;    int paragraph5EndIndex = -1; // Vị trí cuối của đoạn văn thứ 5&#xA;&#xA;    // **Xác định đoạn văn thứ 5**&#xA;    foreach (var element in doc.Body.Content)&#xA;    {&#xA;        if (element.Paragraph != null)&#xA;        {&#xA;            // Bỏ qua các tiêu đề (Heading 1 -&gt; Heading 4)&#xA;            var style = element.Paragraph.ParagraphStyle;&#xA;            if (style != null &amp;&amp; (style.NamedStyleType == &quot;HEADING_1&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_2&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_3&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_4&quot;))&#xA;                continue;&#xA;&#xA;            paragraphIndex++; // Tăng số thứ tự đoạn văn&#xA;&#xA;            if (paragraphIndex == 5)&#xA;            {&#xA;                // Lấy `endIndex` của đoạn văn thứ 5&#xA;                paragraph5EndIndex = element.EndIndex ?? -1;&#xA;                break;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    // **Chèn anchor text ở đoạn 5**&#xA;    if (paragraph5EndIndex != -1 &amp;&amp; remainingLinks.Count &gt; 0)&#xA;    {&#xA;        var lastAnchor = remainingLinks.Last();&#xA;&#xA;        int xemThemLength = &quot;Xem thêm: &quot;.Length;&#xA;        int anchorLength = lastAnchor.Key.Length + 1;&#xA;        int insertIndex = paragraph5EndIndex - 1;&#xA;&#xA;        // Chèn &quot;Xem thêm: &quot; vào cuối đoạn văn&#xA;        requests.Add(new Request&#xA;        {&#xA;            InsertText = new InsertTextRequest&#xA;            {&#xA;                Text = &quot;Xem thêm: &quot;,&#xA;                Location = new Google.Apis.Docs.v1.Data.Location { Index = insertIndex }&#xA;            }&#xA;        });&#xA;&#xA;        // Định dạng văn bản về NORMAL_TEXT để tránh mất định dạng&#xA;        requests.Add(new Request&#xA;        {&#xA;            UpdateParagraphStyle = new UpdateParagraphStyleRequest&#xA;            {&#xA;                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                {&#xA;                    StartIndex = insertIndex,&#xA;                    EndIndex = insertIndex + xemThemLength + lastAnchor.Key.Length + 1&#xA;                },&#xA;                ParagraphStyle = new ParagraphStyle&#xA;                {&#xA;                    NamedStyleType = &quot;NORMAL_TEXT&quot;&#xA;                },&#xA;                Fields = &quot;namedStyleType&quot;&#xA;            }&#xA;        });&#xA;&#xA;        // Bôi đậm chữ &quot;Xem thêm&quot;&#xA;        requests.Add(new Request&#xA;        {&#xA;            UpdateTextStyle = new UpdateTextStyleRequest&#xA;            {&#xA;                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                {&#xA;                    StartIndex = insertIndex,&#xA;                    EndIndex = insertIndex + 9&#xA;                },&#xA;                TextStyle = new TextStyle&#xA;                {&#xA;                    Bold = true&#xA;                },&#xA;                Fields = &quot;bold&quot;&#xA;            }&#xA;        });&#xA;&#xA;        // Chèn anchor cuối cùng kèm xuống dòng&#xA;        requests.Add(new Request&#xA;        {&#xA;            InsertText = new InsertTextRequest&#xA;            {&#xA;                Text = lastAnchor.Key + &quot;\n&quot;,&#xA;                Location = new Google.Apis.Docs.v1.Data.Location { Index = insertIndex + xemThemLength }&#xA;            }&#xA;        });&#xA;&#xA;        // Gán link cho anchor cuối cùng&#xA;        requests.Add(new Request&#xA;        {&#xA;            UpdateTextStyle = new UpdateTextStyleRequest&#xA;            {&#xA;                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                {&#xA;                    StartIndex = insertIndex + xemThemLength,&#xA;                    EndIndex = insertIndex + xemThemLength + lastAnchor.Key.Length&#xA;                },&#xA;                TextStyle = new TextStyle&#xA;                {&#xA;                    Link = new Link { Url = lastAnchor.Value }&#xA;                },&#xA;                Fields = &quot;link&quot;&#xA;            }&#xA;        });&#xA;&#xA;        insertedAnchors.Add(lastAnchor.Key);&#xA;        remainingLinks.Remove(lastAnchor.Key);&#xA;    }&#xA;&#xA;    // Thực thi các yêu cầu cập nhật tài liệu&#xA;    if (requests.Count &gt; 0)&#xA;    {&#xA;        var batchUpdateRequest = new BatchUpdateDocumentRequest { Requests = requests };&#xA;        docsService.Documents.BatchUpdate(batchUpdateRequest, fileId).Execute();&#xA;        updateResult = &quot;Thành công&quot;;&#xA;    }&#xA;    else&#xA;    {&#xA;        updateResult = &quot;Thất bại do không có request nào cập nhật&quot;;&#xA;    }&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    updateResult = &quot;Thất bại: &quot; + ex.Message;&#xA;}&#xA;" DisplayName="Invoke Code Have 1 AnchorLinks" sap:VirtualizedContainerService.HintSize="416,188" sap2010:WorkflowViewState.IdRef="InvokeCode_31" Language="CSharp">
                                          <ui:InvokeCode.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="fileId">[strFileId]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="credentialsPath">[in_strGoogleCredential]</InArgument>
                                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="anchorLinks">[dictAnchorLinks]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="inputKey">[in_strInputKey]</InArgument>
                                            <OutArgument x:TypeArguments="x:String" x:Key="updateResult">[strUpdateResult]</OutArgument>
                                          </ui:InvokeCode.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeCode>
                                      </Sequence>
                                    </ui:CommentOut.Body>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:CommentOut>
                                  <Assign DisplayName="Assign have 1 anchorlinks" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_34">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[strUpdateResult]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">[RPA_AutoUpdateAnchor.InsertAnchor.InsertAnchorsAndOptionalImage(in_strInputKey,in_strGoogleCredential,strFileId,dictAnchorLinks,true,false,"")]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                                <FlowStep.Next>
                                  <FlowDecision x:Name="__ReferenceID2" Condition="[String.IsNullOrEmpty(strImageUrl) = False]" DisplayName="ImageUrl?" sap:VirtualizedContainerService.HintSize="60,60" sap2010:WorkflowViewState.IdRef="FlowDecision_4">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <av:Point x:Key="ShapeLocation">280,530</av:Point>
                                        <av:Size x:Key="ShapeSize">60,60</av:Size>
                                        <av:PointCollection x:Key="TrueConnector">280,560 185,560</av:PointCollection>
                                        <av:PointCollection x:Key="FalseConnector">619.9426433915212,406.9973215110371 649.9426433915212,406.9973215110371 649.9426433915212,461.99732151103706 589.9426433915212,461.99732151103706 589.9426433915212,491.9973215110371</av:PointCollection>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <FlowDecision.True>
                                      <FlowStep x:Name="__ReferenceID9" sap2010:WorkflowViewState.IdRef="FlowStep_5">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <av:Point x:Key="ShapeLocation">75,525</av:Point>
                                            <av:Size x:Key="ShapeSize">110,70</av:Size>
                                            <av:PointCollection x:Key="ConnectorLocation">592.2043994446229,543.6496721160062 497.20439944462294,543.6496721160062 497.20439944462294,583.6496721160062</av:PointCollection>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <Sequence DisplayName="InsertImage" sap:VirtualizedContainerService.HintSize="110,70" sap2010:WorkflowViewState.IdRef="Sequence_89">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,57" sap2010:WorkflowViewState.IdRef="CommentOut_12">
                                            <ui:CommentOut.Body>
                                              <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,108" sap2010:WorkflowViewState.IdRef="Sequence_95">
                                                <sap:WorkflowViewStateService.ViewState>
                                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                  </scg:Dictionary>
                                                </sap:WorkflowViewStateService.ViewState>
                                                <ui:InvokeCode ContinueOnError="{x:Null}" Code="try&#xA;{&#xA;    // Xác thực và khởi tạo dịch vụ Google Docs&#xA;    var credential = GoogleCredential.FromFile(credentialsPath)&#xA;        .CreateScoped(new[] { DocsService.Scope.Documents });&#xA;&#xA;    var docsService = new DocsService(new BaseClientService.Initializer&#xA;    {&#xA;        HttpClientInitializer = credential,&#xA;        ApplicationName = &quot;Google Docs Image Inserter&quot;&#xA;    });&#xA;&#xA;    // Lấy nội dung tài liệu Google Docs&#xA;    var doc = docsService.Documents.Get(fileId).Execute();&#xA;&#xA;    List&lt;Request&gt; requests = new List&lt;Request&gt;(); // Danh sách các yêu cầu cập nhật tài liệu&#xA;    int paragraph5StartIndex = -1; // Vị trí bắt đầu của đoạn văn thứ 5&#xA;    int paragraphIndex = 0; // Đếm số thứ tự đoạn văn&#xA;&#xA;    foreach (var element in doc.Body.Content)&#xA;    {&#xA;        if (element.Paragraph != null)&#xA;        {&#xA;            // Bỏ qua các tiêu đề (Heading 1 -&gt; Heading 4)&#xA;            var style = element.Paragraph.ParagraphStyle;&#xA;            if (style != null &amp;&amp; (style.NamedStyleType == &quot;HEADING_1&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_2&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_3&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_4&quot;))&#xA;                continue;&#xA;&#xA;            paragraphIndex++;&#xA;            &#xA;            if (paragraphIndex == 5)&#xA;            {&#xA;                // Lưu vị trí bắt đầu của đoạn văn thứ 5 để chèn hình ảnh&#xA;                paragraph5StartIndex = element.StartIndex ?? -1;&#xA;                break; // Không cần duyệt thêm&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    // **Chèn hình ảnh sau khi tìm thấy đoạn văn thứ 5**&#xA;    if (!string.IsNullOrEmpty(imageUrl) &amp;&amp; paragraph5StartIndex != -1)&#xA;    {&#xA;        requests.Add(new Request&#xA;        {&#xA;            InsertInlineImage = new InsertInlineImageRequest&#xA;            {&#xA;                Location = new Google.Apis.Docs.v1.Data.Location&#xA;                {&#xA;                    Index = paragraph5StartIndex&#xA;                },&#xA;                Uri = imageUrl,&#xA;                ObjectSize = new Google.Apis.Docs.v1.Data.Size&#xA;                {&#xA;                    Width = new Dimension { Magnitude = 480, Unit = &quot;PT&quot; },&#xA;                    Height = new Dimension { Magnitude = 320, Unit = &quot;PT&quot; }&#xA;                }&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;    // Thực thi yêu cầu cập nhật tài liệu&#xA;    if (requests.Count &gt; 0)&#xA;    {&#xA;        var batchUpdateRequest = new BatchUpdateDocumentRequest { Requests = requests };&#xA;        docsService.Documents.BatchUpdate(batchUpdateRequest, fileId).Execute();&#xA;        updateResult = &quot;Thành công&quot;;&#xA;    }&#xA;    else&#xA;    {&#xA;        updateResult = !string.IsNullOrEmpty(updateResult) ? updateResult + &quot;. Không có request insert image&quot; : &quot;Thất bại do không có request insert image&quot;;&#xA;    }&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;&#x9;updateResult = !string.IsNullOrEmpty(updateResult) ? updateResult + &quot;. Lỗi insert image : &quot;+ex.Message : &quot;Thất bại: &quot; + ex.Message ;&#xA;}&#xA;" DisplayName="Invoke Code Update Image" sap:VirtualizedContainerService.HintSize="416,48" sap2010:WorkflowViewState.IdRef="InvokeCode_30" Language="CSharp">
                                                  <ui:InvokeCode.Arguments>
                                                    <InArgument x:TypeArguments="x:String" x:Key="fileId">[strFileId]</InArgument>
                                                    <InArgument x:TypeArguments="x:String" x:Key="credentialsPath">[in_strGoogleCredential]</InArgument>
                                                    <InOutArgument x:TypeArguments="x:String" x:Key="updateResult">[strUpdateResult]</InOutArgument>
                                                    <InArgument x:TypeArguments="x:String" x:Key="imageUrl">[strImageUrl]</InArgument>
                                                  </ui:InvokeCode.Arguments>
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ui:InvokeCode>
                                              </Sequence>
                                            </ui:CommentOut.Body>
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                          </ui:CommentOut>
                                          <Assign DisplayName="Assign image" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_37">
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:String">[strUpdateResult]</OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="x:String">[RPA_AutoUpdateAnchor.InsertAnchor.InsertAnchorsAndOptionalImage(in_strInputKey,in_strGoogleCredential,strFileId,dictAnchorLinks,false,false, strImageUrl)]</InArgument>
                                            </Assign.Value>
                                          </Assign>
                                        </Sequence>
                                      </FlowStep>
                                    </FlowDecision.True>
                                  </FlowDecision>
                                </FlowStep.Next>
                              </FlowStep>
                            </FlowDecision.True>
                            <FlowDecision.False>
                              <FlowDecision x:Name="__ReferenceID6" Condition="[dictAnchorLinks.Count = 2 AndAlso String.IsNullOrEmpty(row(9).ToString)]" DisplayName="AnchorLinks=2?" sap:VirtualizedContainerService.HintSize="60,60" sap2010:WorkflowViewState.IdRef="FlowDecision_3">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <av:Point x:Key="ShapeLocation">460,340</av:Point>
                                    <av:Size x:Key="ShapeSize">60,60</av:Size>
                                    <av:PointCollection x:Key="TrueConnector">460,370 365,370</av:PointCollection>
                                    <av:PointCollection x:Key="FalseConnector">520,370 550,370 550,414.99999999999994 470,414.99999999999994 470,445</av:PointCollection>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <FlowDecision.True>
                                  <FlowStep x:Name="__ReferenceID7" sap2010:WorkflowViewState.IdRef="FlowStep_3">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <av:Point x:Key="ShapeLocation">255,335</av:Point>
                                        <av:Size x:Key="ShapeSize">110,70</av:Size>
                                        <av:PointCollection x:Key="ConnectorLocation">310,405 310,530</av:PointCollection>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <Sequence DisplayName="Have 2 AnchorLinks" sap:VirtualizedContainerService.HintSize="110,70" sap2010:WorkflowViewState.IdRef="Sequence_87">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,57" sap2010:WorkflowViewState.IdRef="CommentOut_10">
                                        <ui:CommentOut.Body>
                                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,248" sap2010:WorkflowViewState.IdRef="Sequence_93">
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                            <ui:InvokeCode ContinueOnError="{x:Null}" Code="try&#xA;{&#xA;    var credential = GoogleCredential.FromFile(credentialsPath)&#xA;        .CreateScoped(new[] { DocsService.Scope.Documents });&#xA;&#xA;    var docsService = new DocsService(new BaseClientService.Initializer&#xA;    {&#xA;        HttpClientInitializer = credential,&#xA;        ApplicationName = &quot;Google Docs Link Inserter&quot;&#xA;    });&#xA;&#xA;    var doc = docsService.Documents.Get(fileId).Execute();&#xA;&#xA;    List&lt;Request&gt; requests = new List&lt;Request&gt;();&#xA;    HashSet&lt;string&gt; insertedAnchors = new HashSet&lt;string&gt;();&#xA;    Dictionary&lt;string, string&gt; remainingLinks = new Dictionary&lt;string, string&gt;(anchorLinks);&#xA;    string lastAnchorKey = remainingLinks.Keys.LastOrDefault();&#xA;    int totalOffset = 0;&#xA;    int paragraphIndex = 0;&#xA;    bool skipEvenCheck = false;&#xA;&#xA;    foreach (var element in doc.Body.Content)&#xA;    {&#xA;        if (element.Paragraph != null)&#xA;        {&#xA;            var style = element.Paragraph.ParagraphStyle;&#xA;            if (style != null &amp;&amp; (style.NamedStyleType == &quot;HEADING_1&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_2&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_3&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_4&quot;))&#xA;                continue;&#xA;&#xA;            paragraphIndex++;&#xA;&#xA;            if (!skipEvenCheck &amp;&amp; paragraphIndex % 2 == 0)&#xA;                continue;&#xA;&#xA;            skipEvenCheck = false;&#xA;&#xA;            bool foundInThisParagraph = false;&#xA;            string text = &quot;&quot;;&#xA;            int startIndex = -1, endIndex = -1;&#xA;&#xA;            foreach (var textElement in element.Paragraph.Elements)&#xA;            {&#xA;                if (textElement.TextRun != null)&#xA;                {&#xA;                    text += textElement.TextRun.Content;&#xA;                    if (startIndex == -1)&#xA;                        startIndex = (textElement.StartIndex ?? 0) + totalOffset;&#xA;                    endIndex = (textElement.StartIndex ?? 0) + textElement.TextRun.Content.Length + totalOffset;&#xA;                }&#xA;            }&#xA;&#xA;            if (!text.ToLower().Contains(inputKey.ToLower()))&#xA;            {&#xA;                skipEvenCheck = true;&#xA;                continue;&#xA;            }&#xA;&#xA;            foreach (var anchor in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;            {&#xA;                if (!insertedAnchors.Contains(anchor.Key) &amp;&amp; text.ToLower().Contains(inputKey.ToLower()))&#xA;                {&#xA;                    int matchIndex = text.ToLower().IndexOf(inputKey.ToLower());&#xA;                   &#xA;                    if (matchIndex != -1)&#xA;                    {&#xA;                        int insertIndex = startIndex + matchIndex;&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            DeleteContentRange = new DeleteContentRangeRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + inputKey.Length&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            InsertText = new InsertTextRequest&#xA;                            {&#xA;                                Text = anchor.Key,&#xA;                                Location = new Google.Apis.Docs.v1.Data.Location&#xA;                                {&#xA;                                    Index = insertIndex&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            UpdateTextStyle = new UpdateTextStyleRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + anchor.Key.Length&#xA;                                },&#xA;                                TextStyle = new TextStyle&#xA;                                {&#xA;                                    Link = new Link { Url = anchor.Value }&#xA;                                },&#xA;                                Fields = &quot;link&quot;&#xA;                            }&#xA;                        });&#xA;&#xA;                        insertedAnchors.Add(anchor.Key);&#xA;                        remainingLinks.Remove(anchor.Key);&#xA;                        foundInThisParagraph = true;&#xA;                        totalOffset += anchor.Key.Length - inputKey.Length;&#xA;                        break;&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            if (!foundInThisParagraph &amp;&amp; remainingLinks.Count &gt; 0 &amp;&amp; paragraphIndex == doc.Body.Content.Count)&#xA;            {&#xA;                foreach (var missing in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;                {&#xA;                    int xemThemLength = &quot;Xem thêm: &quot;.Length;&#xA;                    int anchorLength = missing.Key.Length + 1; &#xA;&#xA;                    // **Chèn &quot;Xem thêm: &quot; ngay sau đoạn văn cuối cùng**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        InsertText = new InsertTextRequest&#xA;                        {&#xA;                            Text = &quot;Xem thêm: &quot;,&#xA;                            Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex }&#xA;                        }&#xA;                    });&#xA;&#xA;                    // **Đặt NamedStyleType = &quot;NORMAL_TEXT&quot; trước để không làm mất định dạng**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateParagraphStyle = new UpdateParagraphStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex,&#xA;                                EndIndex = endIndex + xemThemLength + missing.Key.Length + 1&#xA;                            },&#xA;                            ParagraphStyle = new ParagraphStyle&#xA;                            {&#xA;                                NamedStyleType = &quot;NORMAL_TEXT&quot;&#xA;                            },&#xA;                            Fields = &quot;namedStyleType&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    // **Bôi đậm từ &quot;Xem thêm&quot; sau khi set NORMAL_TEXT**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateTextStyle = new UpdateTextStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex,&#xA;                                EndIndex = endIndex + 9 // &quot;Xem thêm&quot; dài 9 ký tự&#xA;                            },&#xA;                            TextStyle = new TextStyle&#xA;                            {&#xA;                                Bold = true&#xA;                            },&#xA;                            Fields = &quot;bold&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    // **Chèn anchor text kèm \n sau nó**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        InsertText = new InsertTextRequest&#xA;                        {&#xA;                            Text = missing.Key + &quot;\n&quot;,&#xA;                            Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex + xemThemLength }&#xA;                        }&#xA;                    });&#xA;&#xA;                    // **Gắn link cho anchor cuối cùng**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateTextStyle = new UpdateTextStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex + xemThemLength,&#xA;                                EndIndex = endIndex + xemThemLength + missing.Key.Length&#xA;                            },&#xA;                            TextStyle = new TextStyle&#xA;                            {&#xA;                                Link = new Link { Url = missing.Value }&#xA;                            },&#xA;                            Fields = &quot;link&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    insertedAnchors.Add(missing.Key);&#xA;                    remainingLinks.Remove(missing.Key);&#xA;                    totalOffset += xemThemLength + anchorLength;&#xA;                }&#xA;            }&#xA;&#xA;            if (remainingLinks.Count == 0)&#xA;                break;&#xA;        }&#xA;    }&#xA;&#xA;    if (requests.Count &gt; 0)&#xA;    {&#xA;        var batchUpdateRequest = new BatchUpdateDocumentRequest { Requests = requests };&#xA;        docsService.Documents.BatchUpdate(batchUpdateRequest, fileId).Execute();&#xA;        updateResult = &quot;Thành công&quot;;&#xA;    }&#xA;    else&#xA;    {&#xA;        updateResult = &quot;Thất bại do không có request nào cập nhật anchor text&quot;;&#xA;    }&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    updateResult = &quot;Thất bại : &quot; + ex.Message;&#xA;}&#xA;" DisplayName="Invoke Code Have 2 AnchorLinks" sap:VirtualizedContainerService.HintSize="416,188" sap2010:WorkflowViewState.IdRef="InvokeCode_32" Language="CSharp">
                                              <ui:InvokeCode.Arguments>
                                                <InArgument x:TypeArguments="x:String" x:Key="fileId">[strFileId]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="credentialsPath">[in_strGoogleCredential]</InArgument>
                                                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="anchorLinks">[dictAnchorLinks]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="inputKey">[in_strInputKey]</InArgument>
                                                <OutArgument x:TypeArguments="x:String" x:Key="updateResult">[strUpdateResult]</OutArgument>
                                              </ui:InvokeCode.Arguments>
                                              <sap:WorkflowViewStateService.ViewState>
                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                </scg:Dictionary>
                                              </sap:WorkflowViewStateService.ViewState>
                                            </ui:InvokeCode>
                                          </Sequence>
                                        </ui:CommentOut.Body>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:CommentOut>
                                      <Assign DisplayName="Assign have 2 anchorlinks" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_35">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:String">[strUpdateResult]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:String">[RPA_AutoUpdateAnchor.InsertAnchor.InsertAnchorsAndOptionalImage(in_strInputKey,in_strGoogleCredential,strFileId,dictAnchorLinks,false,true,"")]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </Sequence>
                                    <FlowStep.Next>
                                      <x:Reference>__ReferenceID2</x:Reference>
                                    </FlowStep.Next>
                                  </FlowStep>
                                </FlowDecision.True>
                                <FlowDecision.False>
                                  <FlowStep x:Name="__ReferenceID8" sap2010:WorkflowViewState.IdRef="FlowStep_4">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <av:Point x:Key="ShapeLocation">415,445</av:Point>
                                        <av:Size x:Key="ShapeSize">110,70</av:Size>
                                        <av:PointCollection x:Key="ConnectorLocation">415,480 310,480 310,530</av:PointCollection>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <Sequence DisplayName="UpdateAnchor" sap:VirtualizedContainerService.HintSize="110,70" sap2010:WorkflowViewState.IdRef="Sequence_88">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,57" sap2010:WorkflowViewState.IdRef="CommentOut_11">
                                        <ui:CommentOut.Body>
                                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,248" sap2010:WorkflowViewState.IdRef="Sequence_94">
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                            <ui:InvokeCode ContinueOnError="{x:Null}" Code="try&#xA;{&#xA;    var credential = GoogleCredential.FromFile(credentialsPath)&#xA;        .CreateScoped(new[] { DocsService.Scope.Documents });&#xA;&#xA;    var docsService = new DocsService(new BaseClientService.Initializer&#xA;    {&#xA;        HttpClientInitializer = credential,&#xA;        ApplicationName = &quot;Google Docs Link Inserter&quot;&#xA;    });&#xA;&#xA;    var doc = docsService.Documents.Get(fileId).Execute();&#xA;&#xA;    List&lt;Request&gt; requests = new List&lt;Request&gt;();&#xA;    HashSet&lt;string&gt; insertedAnchors = new HashSet&lt;string&gt;();&#xA;    Dictionary&lt;string, string&gt; remainingLinks = new Dictionary&lt;string, string&gt;(anchorLinks);&#xA;    string lastAnchorKey = remainingLinks.Keys.LastOrDefault();&#xA;    int totalOffset = 0;&#xA;    int paragraphIndex = 0;&#xA;    bool skipEvenCheck = false;&#xA;&#xA;    foreach (var element in doc.Body.Content)&#xA;    {&#xA;        if (element.Paragraph != null)&#xA;        {&#xA;            var style = element.Paragraph.ParagraphStyle;&#xA;            if (style != null &amp;&amp; (style.NamedStyleType == &quot;HEADING_1&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_2&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_3&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_4&quot;))&#xA;                continue;&#xA;&#xA;            paragraphIndex++;&#xA;&#xA;            if (!skipEvenCheck &amp;&amp; paragraphIndex % 2 == 0)&#xA;                continue;&#xA;&#xA;            skipEvenCheck = false;&#xA;&#xA;            bool foundInThisParagraph = false;&#xA;            string text = &quot;&quot;;&#xA;            int startIndex = -1, endIndex = -1;&#xA;&#xA;            foreach (var textElement in element.Paragraph.Elements)&#xA;            {&#xA;                if (textElement.TextRun != null)&#xA;                {&#xA;                    text += textElement.TextRun.Content;&#xA;                    if (startIndex == -1)&#xA;                        startIndex = (textElement.StartIndex ?? 0) + totalOffset;&#xA;                    endIndex = (textElement.StartIndex ?? 0) + textElement.TextRun.Content.Length + totalOffset;&#xA;                }&#xA;            }&#xA;&#xA;            if (!text.ToLower().Contains(inputKey.ToLower()))&#xA;            {&#xA;                skipEvenCheck = true;&#xA;                continue;&#xA;            }&#xA;&#xA;            foreach (var anchor in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;            {&#xA;                if (anchor.Key != lastAnchorKey &amp;&amp; !insertedAnchors.Contains(anchor.Key) &amp;&amp; text.ToLower().Contains(inputKey.ToLower()))&#xA;                {&#xA;                    int matchIndex = text.ToLower().IndexOf(inputKey.ToLower());&#xA;                   &#xA;                    if (matchIndex != -1)&#xA;                    {&#xA;                        int insertIndex = startIndex + matchIndex;&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            DeleteContentRange = new DeleteContentRangeRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + inputKey.Length&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            InsertText = new InsertTextRequest&#xA;                            {&#xA;                                Text = anchor.Key,&#xA;                                Location = new Google.Apis.Docs.v1.Data.Location&#xA;                                {&#xA;                                    Index = insertIndex&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            UpdateTextStyle = new UpdateTextStyleRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + anchor.Key.Length&#xA;                                },&#xA;                                TextStyle = new TextStyle&#xA;                                {&#xA;                                    Link = new Link { Url = anchor.Value }&#xA;                                },&#xA;                                Fields = &quot;link&quot;&#xA;                            }&#xA;                        });&#xA;&#xA;                        insertedAnchors.Add(anchor.Key);&#xA;                        remainingLinks.Remove(anchor.Key);&#xA;                        foundInThisParagraph = true;&#xA;                        totalOffset += anchor.Key.Length - inputKey.Length;&#xA;                        break;&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            // *** Sửa lỗi chèn &quot;Xem thêm: &quot; cuối tài liệu ***&#xA;            if (!foundInThisParagraph &amp;&amp; remainingLinks.Count &gt; 0 &amp;&amp;&#xA;                (lastAnchorKey == remainingLinks.Keys.First() || paragraphIndex == doc.Body.Content.Count))&#xA;            {&#xA;                // **Lấy vị trí cuối cùng hợp lệ của tài liệu**&#xA;                int lastValidIndex = doc.Body.Content.LastOrDefault()?.EndIndex ?? 0;&#xA;                endIndex = Math.Min(endIndex, lastValidIndex);&#xA;&#x9;&#x9;&#x9;&#x9;if (endIndex == lastValidIndex) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endIndex = lastValidIndex -50;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;                foreach (var missing in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;                    {&#xA;                        int xemThemLength = &quot;Xem thêm: &quot;.Length;&#xA;&#xA;                        // **Chèn &quot;Xem thêm: &quot; vào vị trí cuối cùng hợp lệ**&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            InsertText = new InsertTextRequest&#xA;                            {&#xA;                                Text = &quot;Xem thêm: &quot;,&#xA;                                Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex }&#xA;                            }&#xA;                        });&#xA;&#xA;                        // **Đặt NamedStyleType = &quot;NORMAL_TEXT&quot;**&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            UpdateParagraphStyle = new UpdateParagraphStyleRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = endIndex,&#xA;                                    EndIndex = endIndex + xemThemLength + missing.Key.Length + 1&#xA;                                },&#xA;                                ParagraphStyle = new ParagraphStyle&#xA;                                {&#xA;                                    NamedStyleType = &quot;NORMAL_TEXT&quot;&#xA;                                },&#xA;                                Fields = &quot;namedStyleType&quot;&#xA;                            }&#xA;                        });&#xA;&#xA;                        // **Bôi đậm &quot;Xem thêm&quot;**&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            UpdateTextStyle = new UpdateTextStyleRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = endIndex,&#xA;                                    EndIndex = endIndex + 9 // &quot;Xem thêm&quot; dài 9 ký tự&#xA;                                },&#xA;                                TextStyle = new TextStyle&#xA;                                {&#xA;                                    Bold = true&#xA;                                },&#xA;                                Fields = &quot;bold&quot;&#xA;                            }&#xA;                        });&#xA;&#xA;                        // **Chèn anchor text kèm \n**&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            InsertText = new InsertTextRequest&#xA;                            {&#xA;                                Text = missing.Key + &quot;\n&quot;,&#xA;                                Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex + xemThemLength }&#xA;                            }&#xA;                        });&#xA;&#xA;                        // **Gắn link cho anchor**&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            UpdateTextStyle = new UpdateTextStyleRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = endIndex + xemThemLength,&#xA;                                    EndIndex = endIndex + xemThemLength + missing.Key.Length&#xA;                                },&#xA;                                TextStyle = new TextStyle&#xA;                                {&#xA;                                    Link = new Link { Url = missing.Value }&#xA;                                },&#xA;                                Fields = &quot;link&quot;&#xA;                            }&#xA;                        });&#xA;&#xA;                        insertedAnchors.Add(missing.Key);&#xA;                        remainingLinks.Remove(missing.Key);&#xA;                        totalOffset += xemThemLength + missing.Key.Length + 1;&#xA;                    }&#xA;          &#xA;            }&#xA;&#xA;            if (remainingLinks.Count == 0)&#xA;                break;&#xA;        }&#xA;    }&#xA;&#xA;    if (requests.Count &gt; 0)&#xA;    {&#xA;        var batchUpdateRequest = new BatchUpdateDocumentRequest { Requests = requests };&#xA;        docsService.Documents.BatchUpdate(batchUpdateRequest, fileId).Execute();&#xA;        updateResult = &quot;Thành công&quot;;&#xA;    }&#xA;    else&#xA;    {&#xA;        updateResult = &quot;Thất bại do không có request nào cập nhật anchor text&quot;;&#xA;    }&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    updateResult = &quot;Thất bại: &quot; + ex.Message;&#xA;}&#xA;" DisplayName="Invoke Code UpdateAnchor" sap:VirtualizedContainerService.HintSize="416,188" sap2010:WorkflowViewState.IdRef="InvokeCode_33" Language="CSharp">
                                              <ui:InvokeCode.Arguments>
                                                <InArgument x:TypeArguments="x:String" x:Key="fileId">[strFileId]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="credentialsPath">[in_strGoogleCredential]</InArgument>
                                                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="anchorLinks">[dictAnchorLinks]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="inputKey">[in_strInputKey]</InArgument>
                                                <OutArgument x:TypeArguments="x:String" x:Key="updateResult">[strUpdateResult]</OutArgument>
                                              </ui:InvokeCode.Arguments>
                                              <sap:WorkflowViewStateService.ViewState>
                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                </scg:Dictionary>
                                              </sap:WorkflowViewStateService.ViewState>
                                            </ui:InvokeCode>
                                          </Sequence>
                                        </ui:CommentOut.Body>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:CommentOut>
                                      <Assign DisplayName="Assign anchor" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_36">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:String">[strUpdateResult]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:String">[RPA_AutoUpdateAnchor.InsertAnchor.InsertAnchorsAndOptionalImage(in_strInputKey,in_strGoogleCredential,strFileId,dictAnchorLinks,true,true,"")]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </Sequence>
                                    <FlowStep.Next>
                                      <x:Reference>__ReferenceID2</x:Reference>
                                    </FlowStep.Next>
                                  </FlowStep>
                                </FlowDecision.False>
                              </FlowDecision>
                            </FlowDecision.False>
                          </FlowDecision>
                        </FlowDecision.False>
                      </FlowDecision>
                      <x:Reference>__ReferenceID3</x:Reference>
                      <x:Reference>__ReferenceID4</x:Reference>
                      <x:Reference>__ReferenceID5</x:Reference>
                      <x:Reference>__ReferenceID6</x:Reference>
                      <x:Reference>__ReferenceID7</x:Reference>
                      <x:Reference>__ReferenceID8</x:Reference>
                      <x:Reference>__ReferenceID2</x:Reference>
                      <x:Reference>__ReferenceID9</x:Reference>
                      <FlowStep sap2010:WorkflowViewState.IdRef="FlowStep_6">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <av:Point x:Key="ShapeLocation">435,105</av:Point>
                            <av:Size x:Key="ShapeSize">110,70</av:Size>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="110,70" sap2010:WorkflowViewState.IdRef="CommentOut_6">
                          <ui:CommentOut.Body>
                            <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,445" sap2010:WorkflowViewState.IdRef="Sequence_67">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:InvokeCode ContinueOnError="{x:Null}" Code="try&#xA;{&#xA;    var credential = GoogleCredential.FromFile(credentialsPath)&#xA;        .CreateScoped(new[] { DocsService.Scope.Documents });&#xA;&#xA;    var docsService = new DocsService(new BaseClientService.Initializer&#xA;    {&#xA;        HttpClientInitializer = credential,&#xA;        ApplicationName = &quot;Google Docs Link Inserter&quot;&#xA;    });&#xA;&#xA;    var doc = docsService.Documents.Get(fileId).Execute();&#xA;&#xA;    List&lt;Request&gt; requests = new List&lt;Request&gt;();&#xA;    HashSet&lt;string&gt; insertedAnchors = new HashSet&lt;string&gt;();&#xA;    Dictionary&lt;string, string&gt; remainingLinks = new Dictionary&lt;string, string&gt;(anchorLinks);&#xA;    string lastAnchorKey = remainingLinks.Keys.LastOrDefault();&#xA;    int totalOffset = 0;&#xA;    int paragraphIndex = 0;&#xA;    bool skipEvenCheck = false;&#xA;    int paragraph5StartIndex = -1;&#xA;&#xA;    foreach (var element in doc.Body.Content)&#xA;    {&#xA;        if (element.Paragraph != null)&#xA;        {&#xA;            var style = element.Paragraph.ParagraphStyle;&#xA;            if (style != null &amp;&amp; (style.NamedStyleType == &quot;HEADING_1&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_2&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_3&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_4&quot;))&#xA;                continue;&#xA;&#xA;            paragraphIndex++;&#xA;&#xA;            if (paragraphIndex == 5)&#xA;            {&#xA;                // Lưu vị trí của đoạn văn thứ 5 để chèn hình ảnh sau này&#xA;                paragraph5StartIndex = element.StartIndex ?? -1;&#xA;            }&#xA;&#xA;            if (!skipEvenCheck &amp;&amp; paragraphIndex % 2 == 0)&#xA;                continue;&#xA;&#xA;            skipEvenCheck = false;&#xA;&#xA;            bool foundInThisParagraph = false;&#xA;            string text = &quot;&quot;;&#xA;            int startIndex = -1, endIndex = -1;&#xA;&#xA;            foreach (var textElement in element.Paragraph.Elements)&#xA;            {&#xA;                if (textElement.TextRun != null)&#xA;                {&#xA;                    text += textElement.TextRun.Content;&#xA;                    if (startIndex == -1)&#xA;                        startIndex = (textElement.StartIndex ?? 0) + totalOffset;&#xA;                    endIndex = (textElement.StartIndex ?? 0) + textElement.TextRun.Content.Length + totalOffset;&#xA;                }&#xA;            }&#xA;&#xA;            if (!text.ToLower().Contains(inputKey.ToLower()))&#xA;            {&#xA;                skipEvenCheck = true;&#xA;                continue;&#xA;            }&#xA;&#xA;            foreach (var anchor in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;            {&#xA;                if (anchor.Key != lastAnchorKey &amp;&amp; !insertedAnchors.Contains(anchor.Key) &amp;&amp; text.ToLower().Contains(inputKey.ToLower()))&#xA;                {&#xA;                    int matchIndex = text.ToLower().IndexOf(inputKey.ToLower());&#xA;                    if (matchIndex == -1)&#xA;                    {&#xA;                        matchIndex = text.IndexOf(inputKey.ToUpper());&#xA;                    }&#xA;                    if (matchIndex != -1)&#xA;                    {&#xA;                        int insertIndex = startIndex + matchIndex;&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            DeleteContentRange = new DeleteContentRangeRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + inputKey.Length&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            InsertText = new InsertTextRequest&#xA;                            {&#xA;                                Text = anchor.Key,&#xA;                                Location = new Google.Apis.Docs.v1.Data.Location&#xA;                                {&#xA;                                    Index = insertIndex&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            UpdateTextStyle = new UpdateTextStyleRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + anchor.Key.Length&#xA;                                },&#xA;                                TextStyle = new TextStyle&#xA;                                {&#xA;                                    Link = new Link { Url = anchor.Value }&#xA;                                },&#xA;                                Fields = &quot;link&quot;&#xA;                            }&#xA;                        });&#xA;&#xA;                        insertedAnchors.Add(anchor.Key);&#xA;                        remainingLinks.Remove(anchor.Key);&#xA;                        foundInThisParagraph = true;&#xA;                        totalOffset += anchor.Key.Length - inputKey.Length;&#xA;                        break;&#xA;                    }&#xA;                }&#xA;            }&#xA;&#x9;&#x9;&#x9;&#xA;            if (!foundInThisParagraph &amp;&amp; remainingLinks.Count &gt; 0 &amp;&amp;&#xA;                (lastAnchorKey == remainingLinks.Keys.First() || paragraphIndex == doc.Body.Content.Count))&#xA;            {&#xA;                foreach (var missing in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;                {&#xA;                    int xemThemLength = &quot;Xem thêm: &quot;.Length;&#xA;                    int anchorLength = missing.Key.Length + 1;&#xA;&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        InsertText = new InsertTextRequest&#xA;                        {&#xA;                            Text = &quot;Xem thêm: &quot;,&#xA;                            Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex }&#xA;                        }&#xA;                    });&#xA;&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateParagraphStyle = new UpdateParagraphStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex,&#xA;                                EndIndex = endIndex + xemThemLength + missing.Key.Length + 1&#xA;                            },&#xA;                            ParagraphStyle = new ParagraphStyle&#xA;                            {&#xA;                                NamedStyleType = &quot;NORMAL_TEXT&quot;&#xA;                            },&#xA;                            Fields = &quot;namedStyleType&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateTextStyle = new UpdateTextStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex,&#xA;                                EndIndex = endIndex + 9&#xA;                            },&#xA;                            TextStyle = new TextStyle&#xA;                            {&#xA;                                Bold = true&#xA;                            },&#xA;                            Fields = &quot;bold&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        InsertText = new InsertTextRequest&#xA;                        {&#xA;                            Text = missing.Key + &quot;\n&quot;,&#xA;                            Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex + xemThemLength }&#xA;                        }&#xA;                    });&#xA;&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateTextStyle = new UpdateTextStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex + xemThemLength,&#xA;                                EndIndex = endIndex + xemThemLength + missing.Key.Length&#xA;                            },&#xA;                            TextStyle = new TextStyle&#xA;                            {&#xA;                                Link = new Link { Url = missing.Value }&#xA;                            },&#xA;                            Fields = &quot;link&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    insertedAnchors.Add(missing.Key);&#xA;                    remainingLinks.Remove(missing.Key);&#xA;                    totalOffset += xemThemLength + anchorLength;&#xA;                }&#xA;            }&#xA;&#xA;            if (remainingLinks.Count == 0)&#xA;                break;&#xA;        }&#xA;    }&#xA;&#xA;    // **Chèn hình ảnh sau khi hoàn tất chèn anchor text**&#xA;    if (!String.IsNullOrEmpty(imageUrl)) {&#xA;&#x9;&#x9;if (paragraph5StartIndex != -1)&#xA;    {&#xA;        requests.Add(new Request&#xA;        {&#xA;            InsertInlineImage = new InsertInlineImageRequest&#xA;            {&#xA;                Location = new Google.Apis.Docs.v1.Data.Location&#xA;                {&#xA;                    Index = paragraph5StartIndex&#xA;                },&#xA;                Uri = imageUrl,&#xA;                ObjectSize = new Google.Apis.Docs.v1.Data.Size&#xA;                {&#xA;                    Width = new Dimension { Magnitude = 640, Unit = &quot;PT&quot; },&#xA;                    Height = new Dimension { Magnitude = 320, Unit = &quot;PT&quot; }&#xA;                }&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;&#x9;}&#xA;&#x9;&#xA;    if (requests.Count &gt; 0)&#xA;    {&#xA;        var batchUpdateRequest = new BatchUpdateDocumentRequest { Requests = requests };&#xA;        docsService.Documents.BatchUpdate(batchUpdateRequest, fileId).Execute();&#xA;        updateResult = &quot;Thành công&quot;;&#xA;    }&#xA;    else&#xA;    {&#xA;        updateResult = &quot;Thất bại do không có request nào cập nhật anchor text hoặc chèn hình ảnh&quot;;&#xA;    }&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    updateResult = &quot;Thất bại : &quot; + ex.Message;&#xA;}&#xA;" DisplayName="Invoke Code UpdateAnchor Chuan" sap:VirtualizedContainerService.HintSize="416,197" sap2010:WorkflowViewState.IdRef="InvokeCode_21" Language="CSharp">
                                <ui:InvokeCode.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="fileId">[strFileId]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="credentialsPath">[in_strGoogleCredential]</InArgument>
                                  <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="anchorLinks">[dictAnchorLinks]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="inputKey">[in_strInputKey]</InArgument>
                                  <OutArgument x:TypeArguments="x:String" x:Key="updateResult">[strUpdateResult]</OutArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="imageUrl">[strImageUrl]</InArgument>
                                </ui:InvokeCode.Arguments>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:InvokeCode>
                              <ui:InvokeCode ContinueOnError="{x:Null}" Code="try&#xA;{&#xA;    var credential = GoogleCredential.FromFile(credentialsPath)&#xA;        .CreateScoped(new[] { DocsService.Scope.Documents });&#xA;&#xA;    var docsService = new DocsService(new BaseClientService.Initializer&#xA;    {&#xA;        HttpClientInitializer = credential,&#xA;        ApplicationName = &quot;Google Docs Link Inserter&quot;&#xA;    });&#xA;&#xA;    var doc = docsService.Documents.Get(fileId).Execute();&#xA;&#xA;    List&lt;Request&gt; requests = new List&lt;Request&gt;();&#xA;    HashSet&lt;string&gt; insertedAnchors = new HashSet&lt;string&gt;();&#xA;    Dictionary&lt;string, string&gt; remainingLinks = new Dictionary&lt;string, string&gt;(anchorLinks);&#xA;    string lastAnchorKey = remainingLinks.Keys.LastOrDefault();&#xA;    int totalOffset = 0;&#xA;    int paragraphIndex = 0;&#xA;    bool skipEvenCheck = false;&#xA;&#xA;    foreach (var element in doc.Body.Content)&#xA;    {&#xA;        if (element.Paragraph != null)&#xA;        {&#xA;            var style = element.Paragraph.ParagraphStyle;&#xA;            if (style != null &amp;&amp; (style.NamedStyleType == &quot;HEADING_1&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_2&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_3&quot; ||&#xA;                                  style.NamedStyleType == &quot;HEADING_4&quot;))&#xA;                continue;&#xA;&#xA;            paragraphIndex++;&#xA;&#xA;            if (!skipEvenCheck &amp;&amp; paragraphIndex % 2 == 0)&#xA;                continue;&#xA;&#xA;            skipEvenCheck = false;&#xA;&#xA;            bool foundInThisParagraph = false;&#xA;            string text = &quot;&quot;;&#xA;            int startIndex = -1, endIndex = -1;&#xA;&#xA;            foreach (var textElement in element.Paragraph.Elements)&#xA;            {&#xA;                if (textElement.TextRun != null)&#xA;                {&#xA;                    text += textElement.TextRun.Content;&#xA;                    if (startIndex == -1)&#xA;                        startIndex = (textElement.StartIndex ?? 0) + totalOffset;&#xA;                    endIndex = (textElement.StartIndex ?? 0) + textElement.TextRun.Content.Length + totalOffset;&#xA;                }&#xA;            }&#xA;&#xA;            if (!text.ToLower().Contains(inputKey.ToLower()))&#xA;            {&#xA;                skipEvenCheck = true;&#xA;                continue;&#xA;            }&#xA;&#xA;            foreach (var anchor in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;            {&#xA;                if (anchor.Key != lastAnchorKey &amp;&amp; !insertedAnchors.Contains(anchor.Key) &amp;&amp; text.ToLower().Contains(inputKey.ToLower()))&#xA;                {&#xA;                    int matchIndex = text.ToLower().IndexOf(inputKey.ToLower());&#xA;                   &#xA;                    if (matchIndex != -1)&#xA;                    {&#xA;                        int insertIndex = startIndex + matchIndex;&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            DeleteContentRange = new DeleteContentRangeRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + inputKey.Length&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            InsertText = new InsertTextRequest&#xA;                            {&#xA;                                Text = anchor.Key,&#xA;                                Location = new Google.Apis.Docs.v1.Data.Location&#xA;                                {&#xA;                                    Index = insertIndex&#xA;                                }&#xA;                            }&#xA;                        });&#xA;&#xA;                        requests.Add(new Request&#xA;                        {&#xA;                            UpdateTextStyle = new UpdateTextStyleRequest&#xA;                            {&#xA;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;                                {&#xA;                                    StartIndex = insertIndex,&#xA;                                    EndIndex = insertIndex + anchor.Key.Length&#xA;                                },&#xA;                                TextStyle = new TextStyle&#xA;                                {&#xA;                                    Link = new Link { Url = anchor.Value }&#xA;                                },&#xA;                                Fields = &quot;link&quot;&#xA;                            }&#xA;                        });&#xA;&#xA;                        insertedAnchors.Add(anchor.Key);&#xA;                        remainingLinks.Remove(anchor.Key);&#xA;                        foundInThisParagraph = true;&#xA;                        totalOffset += anchor.Key.Length - inputKey.Length;&#xA;                        break;&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            if (!foundInThisParagraph &amp;&amp; remainingLinks.Count &gt; 0 &amp;&amp;&#xA;                (lastAnchorKey == remainingLinks.Keys.First() || paragraphIndex == doc.Body.Content.Count))&#xA;            {&#xA;                foreach (var missing in new Dictionary&lt;string, string&gt;(remainingLinks))&#xA;                {&#xA;                    int xemThemLength = &quot;Xem thêm: &quot;.Length;&#xA;                    int anchorLength = missing.Key.Length + 1; &#xA;&#xA;                    // **Chèn &quot;Xem thêm: &quot; ngay sau đoạn văn cuối cùng**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        InsertText = new InsertTextRequest&#xA;                        {&#xA;                            Text = &quot;Xem thêm: &quot;,&#xA;                            Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex }&#xA;                        }&#xA;                    });&#xA;&#xA;                    // **Đặt NamedStyleType = &quot;NORMAL_TEXT&quot; trước để không làm mất định dạng**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateParagraphStyle = new UpdateParagraphStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex,&#xA;                                EndIndex = endIndex + xemThemLength + missing.Key.Length + 1&#xA;                            },&#xA;                            ParagraphStyle = new ParagraphStyle&#xA;                            {&#xA;                                NamedStyleType = &quot;NORMAL_TEXT&quot;&#xA;                            },&#xA;                            Fields = &quot;namedStyleType&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    // **Bôi đậm từ &quot;Xem thêm&quot; sau khi set NORMAL_TEXT**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateTextStyle = new UpdateTextStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex,&#xA;                                EndIndex = endIndex + 9 // &quot;Xem thêm&quot; dài 9 ký tự&#xA;                            },&#xA;                            TextStyle = new TextStyle&#xA;                            {&#xA;                                Bold = true&#xA;                            },&#xA;                            Fields = &quot;bold&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    // **Chèn anchor text kèm \n sau nó**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        InsertText = new InsertTextRequest&#xA;                        {&#xA;                            Text = missing.Key + &quot;\n&quot;,&#xA;                            Location = new Google.Apis.Docs.v1.Data.Location { Index = endIndex + xemThemLength }&#xA;                        }&#xA;                    });&#xA;&#xA;                    // **Gắn link cho anchor cuối cùng**&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateTextStyle = new UpdateTextStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = endIndex + xemThemLength,&#xA;                                EndIndex = endIndex + xemThemLength + missing.Key.Length&#xA;                            },&#xA;                            TextStyle = new TextStyle&#xA;                            {&#xA;                                Link = new Link { Url = missing.Value }&#xA;                            },&#xA;                            Fields = &quot;link&quot;&#xA;                        }&#xA;                    });&#xA;&#xA;                    insertedAnchors.Add(missing.Key);&#xA;                    remainingLinks.Remove(missing.Key);&#xA;                    totalOffset += xemThemLength + anchorLength;&#xA;                }&#xA;            }&#xA;&#xA;            if (remainingLinks.Count == 0)&#xA;                break;&#xA;        }&#xA;    }&#xA;&#xA;    if (requests.Count &gt; 0)&#xA;    {&#xA;        var batchUpdateRequest = new BatchUpdateDocumentRequest { Requests = requests };&#xA;        docsService.Documents.BatchUpdate(batchUpdateRequest, fileId).Execute();&#xA;        updateResult = &quot;Thành công&quot;;&#xA;    }&#xA;    else&#xA;    {&#xA;        updateResult = &quot;Thất bại do không có request nào cập nhật anchor text&quot;;&#xA;    }&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    updateResult = &quot;Thất bại : &quot; + ex.Message;&#xA;}&#xA;" DisplayName="Invoke Code UpdateAnchor 101" sap:VirtualizedContainerService.HintSize="416,188" sap2010:WorkflowViewState.IdRef="InvokeCode_19" Language="CSharp">
                                <ui:InvokeCode.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="fileId">[strFileId]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="credentialsPath">[in_strGoogleCredential]</InArgument>
                                  <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="anchorLinks">[dictAnchorLinks]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="inputKey">[in_strInputKey]</InArgument>
                                  <OutArgument x:TypeArguments="x:String" x:Key="updateResult">[strUpdateResult]</OutArgument>
                                </ui:InvokeCode.Arguments>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:InvokeCode>
                            </Sequence>
                          </ui:CommentOut.Body>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:CommentOut>
                      </FlowStep>
                    </Flowchart>
                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="600,173" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="Info" Message="[strUpdateResult]" />
                    <Assign DisplayName="Assign Row NOTE" sap:VirtualizedContainerService.HintSize="600,105" sap2010:WorkflowViewState.IdRef="Assign_32">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Object">[row(11)]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[strUpdateResult]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </If.Then>
                <If.Else>
                  <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="634,89" sap2010:WorkflowViewState.IdRef="Sequence_57">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Sequence>
                </If.Else>
              </If>
            </Sequence>
          </TryCatch.Try>
          <TryCatch.Catches>
            <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_7">
              <ActivityAction x:TypeArguments="s:Exception">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="1882,338" sap2010:WorkflowViewState.IdRef="Sequence_58">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="636,173" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Error" Message="[&quot;Lỗi : &quot;+exception.Message]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <Assign DisplayName="Assign Row NOTE" sap:VirtualizedContainerService.HintSize="636,105" sap2010:WorkflowViewState.IdRef="Assign_31">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Object">[row(11)]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Object">["Thất bại : "+exception.Message]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ActivityAction>
            </Catch>
          </TryCatch.Catches>
          <TryCatch.Finally>
            <Sequence DisplayName="Finally" sap:VirtualizedContainerService.HintSize="670,89" sap2010:WorkflowViewState.IdRef="Sequence_59">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Sequence>
          </TryCatch.Finally>
        </TryCatch>
      </ActivityAction>
    </ParallelForEach>
  </Sequence>
</Activity>